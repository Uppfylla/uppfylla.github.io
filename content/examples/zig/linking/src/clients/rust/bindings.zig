const std = @import("std");
const root = @import("root");

const Buffer = struct {
    inner: std.ArrayList(u8),

    pub fn init(allocator: std.mem.Allocator) Buffer {
        return .{
            .inner = std.ArrayList(u8).init(allocator),
        };
    }

    pub fn write(self: *Buffer, comptime format: []const u8, args: anytype) void {
        self.inner.writer().print(format, args) catch unreachable;
    }
};

pub fn main() !void {
    @setEvalBranchQuota(100_000);
    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);
    defer arena.deinit();
    const alloc = arena.allocator();
    var buffer = Buffer.init(alloc);
    buffer.write(
        \\// !!! WARNING, DO NOT EDIT THIS FILE !!!
        \\// Auto-generated file python bindings.
        \\pub mod zig {{
        \\   extern "C" {{
        \\       pub fn zig_add(a: i32, b: i32) -> i32;
        \\   }}
        \\}}
    , .{});
    try std.io.getStdOut().writeAll(buffer.inner.items);
}
